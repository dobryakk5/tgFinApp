import React, { useState, useEffect } from 'react';
import { WebAppProvider, useWebApp, useShowPopup } from '@vkruglikov/react-telegram-web-app';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
export default function TelegramDebugger() {
  const [status, setStatus] = useState('initializing');
  const [webAppState, setWebAppState] = useState(null);
  const [windowTelegram, setWindowTelegram] = useState(null);
  const [diagnostics, setDiagnostics] = useState([]);
  
  const addDiagnostic = (message) => {
    setDiagnostics(prev => [
      ...prev,
      `[${new Date().toLocaleTimeString()}] ${message}`
    ]);
  };

  // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ window
  useEffect(() => {
    if (typeof window === 'undefined') {
      addDiagnostic('‚ö†Ô∏è window object –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, SSR)');
      setStatus('error');
      return;
    }
    
    addDiagnostic('‚úÖ window object –¥–æ—Å—Ç—É–ø–µ–Ω');
    setWindowTelegram(window.Telegram);
    addDiagnostic(`window.Telegram = ${window.Telegram ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
    
    if (window.Telegram?.WebApp) {
      addDiagnostic('‚úÖ Telegram.WebApp –Ω–∞–π–¥–µ–Ω –≤ window');
    } else {
      addDiagnostic('‚ö†Ô∏è Telegram.WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ window');
    }
  }, []);

  // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  useEffect(() => {
    if (status === 'initializing') {
      try {
        const webAppFromHook = useWebApp();
        setWebAppState(webAppFromHook);
        
        if (webAppFromHook) {
          addDiagnostic('‚úÖ useWebApp() –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç WebApp');
          setStatus('ready');
        } else {
          addDiagnostic('‚ö†Ô∏è useWebApp() –≤–µ—Ä–Ω—É–ª null/undefined');
          setStatus('provider-issue');
        }
      } catch (e) {
        addDiagnostic(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ useWebApp(): ${e.message}`);
        setStatus('hook-error');
      }
    }
  }, [status]);

  // –®–∞–≥ 3: –ü–æ–ø—ã—Ç–∫–∞ —Ä—É—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const tryManualInit = () => {
    addDiagnostic('–ü–æ–ø—ã—Ç–∫–∞ —Ä—É—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
    
    if (window.Telegram?.WebApp) {
      try {
        window.Telegram.WebApp.ready();
        addDiagnostic('‚úÖ –í—ã–∑–≤–∞–Ω Telegram.WebApp.ready()');
        addDiagnostic(`–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${window.Telegram.WebApp.platform}`);
        addDiagnostic(`–í–µ—Ä—Å–∏—è: ${window.Telegram.WebApp.version}`);
        addDiagnostic(`InitData: ${window.Telegram.WebApp.initData ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
        setStatus('manual-success');
      } catch (e) {
        addDiagnostic(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${e.message}`);
        setStatus('manual-error');
      }
    } else {
      addDiagnostic('‚ö†Ô∏è window.Telegram.WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞');
      setStatus('manual-not-available');
    }
  };

  // –†–µ–Ω–¥–µ—Ä –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
  if (status === 'initializing') {
    return (
      <div className="p-4 max-w-2xl mx-auto">
        <h1 className="text-2xl font-bold mb-4">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...</h1>
        <p>–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ Telegram</p>
        <div className="mt-4 p-3 bg-gray-100 rounded">
          {diagnostics.map((msg, i) => (
            <div key={i} className="text-sm font-mono">{msg}</div>
          ))}
        </div>
      </div>
    );
  }

  if (status.startsWith('manual-')) {
    return (
      <div className="p-4 max-w-2xl mx-auto">
        <h1 className="text-2xl font-bold mb-4">–†—É—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</h1>
        <div className="mb-4 p-3 bg-yellow-50 border-l-4 border-yellow-400">
          <h3 className="font-bold">–†–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
          <div className="mt-2 p-2 bg-white rounded">
            {diagnostics.slice(-3).map((msg, i) => (
              <div key={i} className="text-sm font-mono">{msg}</div>
            ))}
          </div>
        </div>
        <button 
          onClick={() => setStatus('initializing')}
          className="px-4 py-2 bg-blue-500 text-white rounded"
        >
          –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        </button>
      </div>
    );
  }

  return (
    <div className="p-4 max-w-2xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telegram WebApp</h1>
      
      <div className="mb-6 p-4 bg-red-50 border-l-4 border-red-500">
        <h2 className="font-bold text-lg mb-2">–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞</h2>
        <p>
          –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Telegram WebApp API —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä.
          –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <div className="border rounded-lg p-4">
          <h3 className="font-bold mb-2">–ü—Ä–∏—á–∏–Ω–∞ 1: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä</h3>
          <p className="mb-3">
            –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±—ë—Ä–Ω—É—Ç –≤ WebAppProvider:
          </p>
          <pre className="bg-gray-800 text-white p-3 rounded text-sm">
{`import { WebAppProvider } from '@vkruglikov/react-telegram-web-app';

function App() {
  return (
    <WebAppProvider>
      <YourComponent />
    </WebAppProvider>
  );
}`}
          </pre>
        </div>

        <div className="border rounded-lg p-4">
          <h3 className="font-bold mb-2">–ü—Ä–∏—á–∏–Ω–∞ 2: –°–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</h3>
          <p className="mb-3">
            –î–æ–±–∞–≤—å—Ç–µ —Å–∫—Ä–∏–ø—Ç Telegram WebApp –≤ index.html:
          </p>
          <pre className="bg-gray-800 text-white p-3 rounded text-sm">
{`<head>
  <script src="https://telegram.org/js/telegram-web-app.js"></script>
</head>`}
          </pre>
        </div>
      </div>

      <div className="border rounded-lg p-4 mb-6">
        <h3 className="font-bold mb-2">–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å</h3>
        <div className="mb-3 p-3 bg-gray-100 rounded">
          {diagnostics.map((msg, i) => (
            <div key={i} className="text-sm font-mono">{msg}</div>
          ))}
        </div>
        
        <button 
          onClick={tryManualInit}
          className="px-4 py-2 bg-green-600 text-white rounded mr-3"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä—É—á–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        </button>
        
        <button 
          onClick={() => window.location.reload()}
          className="px-4 py-2 bg-blue-500 text-white rounded"
        >
          –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
        </button>
      </div>

      <div className="bg-gray-100 p-4 rounded-lg">
        <h3 className="font-bold mb-2">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:</h3>
        <ol className="list-decimal pl-5 space-y-2">
          <li>–û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12) –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫</li>
          <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–∞ script —Å Telegram WebApp –≤ –≤–∫–ª–∞–¥–∫–µ Elements</li>
          <li>–í –∫–æ–Ω—Å–æ–ª–∏ –≤–≤–µ–¥–∏—Ç–µ <code>window.Telegram</code> –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç</li>
          <li>
            –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ TMA Launcher:
            <pre className="bg-black text-white p-2 mt-2 rounded">npx https://github.com/Telegram-Mini-Apps/tma-launcher</pre>
          </li>
          <li>
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—É—Å–∫ –≤ Telegram:
            <pre className="bg-black text-white p-2 mt-2 rounded">t.me/your_bot?startapp=test</pre>
          </li>
        </ol>
      </div>
    </div>
  );
}

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
export function DebugWrapper() {
  return (
    <WebAppProvider>
      <TelegramDebugger />
    </WebAppProvider>
  );
}